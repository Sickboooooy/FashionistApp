# Implementar la Generación de Outfits con OpenAI

Ahora que tenemos la estructura básica de la aplicación con los Context Providers (OutfitProvider y PreferencesProvider) y la configuración de Tailwind, necesitamos implementar el flujo principal de la aplicación: la generación de outfits utilizando OpenAI.

## Componentes a desarrollar:

### 1. Componente de Subida de Imágenes

Crea un componente de carga de imágenes con las siguientes características:

- Área para arrastrar y soltar imágenes (drag & drop)
- Botón de selección de archivos tradicional
- Vista previa de la imagen cargada
- Opción para tomar foto con la cámara (para móviles)
- Indicador de carga durante el procesamiento
- Soporte para formatos JPG, PNG, WEBP

Ejemplo de estructura para `ImageUploader.tsx`:

```tsx
import React, { useState, useRef } from 'react';
import { useOutfit } from '../context/OutfitProvider';

const ImageUploader = () => {
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { uploadImage } = useOutfit();
  
  // Implementar manejadores para:
  // - handleDrop
  // - handleFileChange
  // - handleSubmit
  
  return (
    <div className="w-full max-w-md mx-auto">
      {/* UI para drag & drop, vista previa y botones */}
    </div>
  );
};

export default ImageUploader;
```

### 2. Backend para Procesamiento de Imágenes

Crea un endpoint API para procesar las imágenes y comunicarse con OpenAI:

```javascript
// server/routes/outfitRoutes.js
const express = require('express');
const multer = require('multer');
const { OpenAI } = require('openai');
const fs = require('fs');
const path = require('path');

const router = express.Router();
const upload = multer({ dest: 'uploads/' });

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// Endpoint para subir imágenes y generar outfits
router.post('/generate', upload.single('image'), async (req, res) => {
  try {
    // 1. Procesar la imagen subida
    const imagePath = req.file.path;
    
    // 2. Preparar el prompt para OpenAI
    const imageBuffer = fs.readFileSync(imagePath);
    const base64Image = imageBuffer.toString('base64');
    
    // 3. Enviar a OpenAI para análisis y generación de outfits
    const response = await openai.chat.completions.create({
      model: "gpt-4-vision-preview",
      messages: [
        {
          role: "system",
          content: "Eres un estilista profesional experto en moda. Analiza la imagen de la prenda y sugiere 3 outfits completos que combinen bien. Enfócate en estilo, color y ocasión."
        },
        {
          role: "user",
          content: [
            { type: "text", text: "Esta es una prenda de mi closet. Genera 3 outfits diferentes que pueda crear con ella. Para cada outfit, describe todas las prendas necesarias, los colores, y para qué ocasión sería apropiado." },
            {
              type: "image_url",
              image_url: {
                url: `data:image/jpeg;base64,${base64Image}`
              }
            }
          ]
        }
      ],
      max_tokens: 1000
    });
    
    // 4. Procesar y devolver resultados
    const outfitSuggestions = response.choices[0].message.content;
    
    // Opcional: Estructurar la respuesta (podrías usar un prompt más estructurado)
    const parsedOutfits = parseOutfitSuggestions(outfitSuggestions);
    
    res.json({
      success: true,
      outfits: parsedOutfits,
      rawResponse: outfitSuggestions
    });
    
    // Limpiar archivos temporales
    fs.unlinkSync(imagePath);
    
  } catch (error) {
    console.error('Error generating outfits:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Función auxiliar para estructurar la respuesta
function parseOutfitSuggestions(text) {
  // Implementa lógica para estructurar la respuesta de texto
  // Este es un ejemplo básico, podrías mejorarlo según tus necesidades
  const outfits = [];
  
  // Buscar patrones como "Outfit 1:", "Outfit 2:", etc.
  const outfitRegex = /Outfit\s+(\d+):([^Outfit]+)/gi;
  let match;
  
  while ((match = outfitRegex.exec(text)) !== null) {
    outfits.push({
      id: parseInt(match[1]),
      description: match[2].trim()
    });
  }
  
  return outfits.length > 0 ? outfits : [{ id: 1, description: text }];
}

module.exports = router;
```

### 3. Contexto para Gestión de Outfits

Mejora el `OutfitProvider` para manejar la generación de outfits:

```tsx
// context/OutfitProvider.tsx
import React, { createContext, useContext, useState } from 'react';

interface Outfit {
  id: number;
  description: string;
  // Puedes agregar más propiedades según necesites
}

interface OutfitContextType {
  outfits: Outfit[];
  isLoading: boolean;
  error: string | null;
  uploadImage: (file: File) => Promise<void>;
  clearOutfits: () => void;
}

const OutfitContext = createContext<OutfitContextType | undefined>(undefined);

export const OutfitProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [outfits, setOutfits] = useState<Outfit[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const uploadImage = async (file: File) => {
    setIsLoading(true);
    setError(null);
    
    try {
      const formData = new FormData();
      formData.append('image', file);
      
      const response = await fetch('/api/outfits/generate', {
        method: 'POST',
        body: formData,
      });
      
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.error || 'Error generando outfits');
      }
      
      setOutfits(data.outfits);
    } catch (err) {
      setError(err.message || 'Error inesperado');
      console.error('Error uploading image:', err);
    } finally {
      setIsLoading(false);
    }
  };
  
  const clearOutfits = () => {
    setOutfits([]);
  };
  
  return (
    <OutfitContext.Provider value={{ outfits, isLoading, error, uploadImage, clearOutfits }}>
      {children}
    </OutfitContext.Provider>
  );
};

export const useOutfit = () => {
  const context = useContext(OutfitContext);
  if (context === undefined) {
    throw new Error('useOutfit must be used within an OutfitProvider');
  }
  return context;
};
```

### 4. Componente de Visualización de Outfits

Crea un componente para mostrar los outfits generados:

```tsx
// components/OutfitResults.tsx
import React from 'react';
import { useOutfit } from '../context/OutfitProvider';

const OutfitResults = () => {
  const { outfits, isLoading, error } = useOutfit();

  if (isLoading) {
    return (
      <div className="w-full max-w-md mx-auto mt-8 p-4 text-center">
        <div className="animate-pulse flex flex-col items-center">
          <div className="h-32 w-32 bg-gray-300 rounded-full mb-4"></div>
          <div className="h-4 w-3/4 bg-gray-300 rounded mb-2"></div>
          <div className="h-4 w-1/2 bg-gray-300 rounded"></div>
        </div>
        <p className="mt-4 text-gray-600">Generando outfits elegantes para ti...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="w-full max-w-md mx-auto mt-8 p-4 bg-red-50 border border-red-200 rounded-lg text-center">
        <p className="text-red-600">{error}</p>
        <button className="mt-4 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">
          Intentar nuevamente
        </button>
      </div>
    );
  }

  if (outfits.length === 0) {
    return null;
  }

  return (
    <div className="w-full max-w-4xl mx-auto mt-8">
      <h2 className="text-2xl font-serif text-center mb-6">Tus Outfits Personalizados</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {outfits.map((outfit) => (
          <div key={outfit.id} className="bg-white rounded-lg overflow-hidden shadow-lg">
            <div className="p-6">
              <h3 className="text-xl font-bold mb-2">Outfit {outfit.id}</h3>
              <p className="text-gray-700 whitespace-pre-line">{outfit.description}</p>
              
              <div className="mt-4 flex justify-end">
                <button className="text-purple-600 hover:text-purple-800 font-medium flex items-center gap-1">
                  Guardar
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default OutfitResults;
```

### 5. Integración en la Página Principal

Actualiza la página principal para incorporar estos componentes:

```tsx
// pages/index.tsx
import React from 'react';
import ImageUploader from '../components/ImageUploader';
import OutfitResults from '../components/OutfitResults';

const Home = () => {
  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4">
      <div className="max-w-6xl mx-auto">
        <header className="text-center mb-12">
          <h1 className="text-4xl font-serif font-bold mb-2 text-transparent bg-clip-text bg-gradient-to-r from-amber-500 to-pink-500">
            Selene Style
          </h1>
          <p className="text-gray-600">
            Descubre outfits perfectos con inteligencia artificial
          </p>
        </header>
        
        <div className="bg-white rounded-xl shadow-xl overflow-hidden">
          <div className="p-8">
            <h2 className="text-2xl font-serif text-center mb-6">
              Sube una prenda y crea looks increíbles
            </h2>
            
            <ImageUploader />
          </div>
        </div>
        
        <OutfitResults />
      </div>
    </div>
  );
};

export default Home;
```

## Instrucciones Adicionales

1. **Configuración del servidor**: Asegúrate de conectar correctamente las rutas del servidor:
   ```javascript
   // server/index.js
   const express = require('express');
   const outfitRoutes = require('./routes/outfitRoutes');
   
   const app = express();
   
   app.use(express.json());
   app.use('/api/outfits', outfitRoutes);
   
   // Resto de la configuración...
   ```

2. **Estilo Visual**: Mantén la estética elegante y sofisticada:
   - Usa la paleta de colores dorada y negra definida en Tailwind
   - Aplica tipografías serif para títulos
   - Incorpora elementos visuales que evoquen revistas de moda de alta gama

3. **Optimización de Prompts**: El prompt para OpenAI puede ser refinado para obtener mejores resultados:
   - Especifica el estilo concreto (formal, casual, etc.)
   - Incluye información sobre clima o temporada
   - Añade restricciones o preferencias del usuario

4. **Mejoras de UX**:
   - Agrega animaciones suaves durante la carga
   - Implementa feedback de éxito/error claro
   - Permite guardar outfits favoritos

## Notas Importantes

- Asegúrate de manejar correctamente las imágenes grandes (compresión, límites de tamaño)
- La API de OpenAI puede tardar en responder, implementa timeouts apropiados
- Considera implementar un sistema de caché para reducir llamadas a la API

Una vez implementada esta funcionalidad principal, podemos continuar con la gestión del closet y el catálogo de diseños de Selene.

## Pruebas

Después de implementar estos componentes, prueba el flujo completo:
1. Subir una imagen de una prenda
2. Verificar que se procese correctamente
3. Comprobar que se generen outfits variados y relevantes
4. Validar la presentación visual de los resultados